function getPrimaryKey(db2ModelProperties){

  var db2ModelPrimaryKey = null;

  for(var key in db2ModelProperties){

    if(db2ModelProperties[key].key === 'primary'){

      db2ModelPrimaryKey = key;
    }
  }

  return db2ModelPrimaryKey;
}

function db2BuildConnectionString(db2ConnectionData){
  
  var aDb2Connection = [];

  for(var db2Part in db2ConnectionData){

    if(db2Part !== 'type'){

      aDb2Connection.push(db2Part + '=' + db2ConnectionData[db2Part]);
    }
  }

  return aDb2Connection.join(';')
}

function db2TypeValidationInsert(db2Model){

  // Primary key won't be checked
  // Primary key will be generated by Database

  let requiredError = false;
  let typeError = false;
  let lengthError = false;

  for(let prop in db2Model.getProperties()){

    if(db2Model.getProperties()[prop]['key'] != 'primary'){

      let checkValue = db2Model[prop];

      if(db2Model.getProperties()[prop]['required'] != undefined){

        if(checkValue == null || checkValue == undefined || checkValue == ''){

          // Required field may not be empty
          requiredError = true;
          return {err: true, errText: 'Required field ' + prop + ' is empty.', errOrigin: 'db2Helper.db2TypeValidationInsert()'};
        }
      }

      if(db2Model.getProperties()[prop]['type'] != typeof checkValue){

        // Type missmatch
        return {err: true, errText: 'Required field ' + prop + ' is of type: ' + typeof checkValue + ', expected: ' + db2Model.getProperties()[prop]['type'], errOrigin: 'db2Helper.db2TypeValidationInsert()'};
      }

      if(db2Model.getProperties()[prop]['type'] == 'string'){

        if(checkValue.length > db2Model.getProperties()[prop]['size']){

          return {err: true, errText: 'Length of field '+ prop + ' is too long.', errOrigin: 'db2Helper.db2TypeValidationInsert()'};
        }
      }
    }
  }

  return {err: false};
}

module.exports = {getPrimaryKey: getPrimaryKey, db2BuildConnectionString: db2BuildConnectionString, db2TypeValidationInsert: db2TypeValidationInsert};
